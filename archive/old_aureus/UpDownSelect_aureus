#!/bin/bash
#SBATCH --job-name=UpDownSelect
#SBATCH --time=5-00:00:00
#SBATCH --cpus-per-task=200
#SBATCH --mem-per-cpu=4G

INPUT_DIR=${1:-ncbi_dataset}
OUTPUT_DIR=${2:-data}
THREADS=${3:-12}
TAXON=${4:-"staphylococcus aureus"}

fetch_genome_data() {
    local INPUT_DIR=$1
    local TAXON=$2
    datasets download genome taxon "$TAXON" \
        --assembly-level complete \
        --exclude-atypical \
        --assembly-source 'RefSeq' \
        --dehydrated \
        --filename $INPUT_DIR.zip
    unzip -n $INPUT_DIR.zip
    rm $INPUT_DIR.zip
    datasets rehydrate --directory .
    }

format_metadata() {
    local INPUT_FILE=$1
    local OUTPUT_FILE=$2
    dataformat tsv genome --inputfile $INPUT_FILE --fields accession,assminfo-biosample-attribute-name,assminfo-biosample-attribute-value > $OUTPUT_FILE
    python scripts/metadata.py -i $OUTPUT_FILE -o $OUTPUT_FILE
}

extract_orfs() {
    local INPUT_DIR=$1
    local OUTPUT_DIR=$2
    rm -r $OUTPUT_DIR 2> /dev/null
    mkdir -p $OUTPUT_DIR
    find $INPUT_DIR -name "*.fna" > parallel_input.tmp
    parallel -j $THREADS \
        "python scripts/extract_orfs.py -i {} \
            -d {/.} \
            -o $OUTPUT_DIR/{/.}.fasta" \
        :::: parallel_input.tmp
    rm parallel_input.tmp
    }

build_blast_database() {
    local INPUT_DIR=$1
    local OUTPUT_DIR=$2
    rm -r $OUTPUT_DIR 2> /dev/null
    mkdir -p $OUTPUT_DIR
    find $INPUT_DIR -name "*.fasta" -exec cat {} + > $OUTPUT_DIR/combined.fasta
    makeblastdb -in $OUTPUT_DIR/combined.fasta -dbtype nucl -out $OUTPUT_DIR/full_db
    }

split_amr_db() {
    local FASTA=$1
    local OUTPUT_DIR=$2
    rm -r $OUTPUT_DIR 2> /dev/null
    mkdir -p $OUTPUT_DIR
    seqkit split -i --by-id-prefix '' --out-dir $OUTPUT_DIR/dna $FASTA
    }

translate_fasta() {
    local INPUT_DIR=$1
    local OUTPUT_DIR=$2
    rm -r $OUTPUT_DIR 2> /dev/null
    mkdir -p $OUTPUT_DIR
    find $INPUT_DIR -name "*.fasta" > parallel_input.tmp
    parallel -j $THREADS \
        "transeq \
            -sequence {} \
            -outseq $OUTPUT_DIR/{/.}.fasta" \
        :::: parallel_input.tmp
    rm parallel_input.tmp
    }

amr_blast() {
    local INPUT_DIR=$1
    local BLASTDB=$2
    local OUTPUT_DIR=$3
    rm -r $OUTPUT_DIR 2> /dev/null
    mkdir -p $OUTPUT_DIR
    find $INPUT_DIR -type f > parallel_input.tmp
    parallel -j 1 \
        "tblastn -query {} \
            -db $BLASTDB \
            -max_target_seqs 10000 \
            -num_threads=$THREADS \
            -out $OUTPUT_DIR/{/.}.tsv \
            -outfmt '6 sseqid qlen length pident'" \
        :::: parallel_input.tmp
    rm parallel_input.tmp
    find $OUTPUT_DIR -type f -empty -delete
    }

filter_blast() {
    local INPUT_DIR=$1
    local OUTPUT_DIR=$2
    rm -r $OUTPUT_DIR 2> /dev/null
    mkdir -p $OUTPUT_DIR
    find $INPUT_DIR -type f > parallel_input.tmp
    parallel -j $THREADS \
        "python scripts/filter_blast.py -i {} \
        -o $OUTPUT_DIR/{/.}.out" \
        :::: parallel_input.tmp
    rm parallel_input.tmp
    find $OUTPUT_DIR -type f -empty -delete   
}

collect_amr_seqs(){
    local INPUT_DIR=$1
    local ALL_SEQS=$2
    local OUTPUT_DIR=$3
    rm -r $OUTPUT_DIR 2> /dev/null
    mkdir -p $OUTPUT_DIR
    find $INPUT_DIR -type f > parallel_input.tmp
    parallel -j $THREADS \
        "seqkit grep -n -f {} $ALL_SEQS > $OUTPUT_DIR/{/.}.fasta" \
        :::: parallel_input.tmp
    rm parallel_input.tmp 
    }

sort_amr_seqs(){
    local INPUT_DIR=$1
    local OUTPUT_DIR=$2
    local INPUT_DIR2=$3
    rm -r $OUTPUT_DIR 2> /dev/null
    mkdir -p $OUTPUT_DIR
    find $INPUT_DIR -type f > parallel_input.tmp
    parallel -j $THREADS \
        "python scripts/sort_amr_seqs.py -i {} \
        -o $OUTPUT_DIR/{/.}.fasta\
        -r $INPUT_DIR2/{/.}.out" \
        :::: parallel_input.tmp
    rm parallel_input.tmp 
    }

msa() {
    local INPUT_DIR=$1
    local OUTPUT_DIR=$2
    rm -r $OUTPUT_DIR 2> /dev/null
    mkdir -p $OUTPUT_DIR
    find $INPUT_DIR -name "*.fasta" > parallel_input.tmp
    parallel -j $THREADS \
        "mafft \
            --auto \
            --preservecase \
            {} \
            > $OUTPUT_DIR/{/.}.msa" \
        :::: parallel_input.tmp
    rm parallel_input.tmp
    }

pal2nal() {
    local INPUT_DIR=$1
    local INPUT_DIR2=$2
    local OUTPUT_DIR=$3
    rm -r $OUTPUT_DIR 2> /dev/null
    mkdir -p $OUTPUT_DIR
    find $INPUT_DIR -name "*.msa" > parallel_input.tmp
    parallel -j $THREADS \
        "pal2nal.pl -output fasta {} $INPUT_DIR2/{/.}.fasta > $OUTPUT_DIR/{/.}.fasta" \
        :::: parallel_input.tmp
    rm parallel_input.tmp
    }

remove_duplicates() {
    local INPUT_DIR=$1
    local OUTPUT_DIR=$2
    rm -r $OUTPUT_DIR 2> /dev/null
    mkdir -p $OUTPUT_DIR
    find $INPUT_DIR -type f > parallel_input.tmp
    parallel -j $THREADS \
        "seqkit rmdup -s {} > $OUTPUT_DIR/{/.}.fasta" \
        :::: parallel_input.tmp
    rm parallel_input.tmp
    }

check_min_seq_counts() {
    local INPUT_DIR="$1"
    local OUTPUT_DIR="$2"
    local CUTOFF="$3"
    rm -r $OUTPUT_DIR 2> /dev/null
    mkdir -p $OUTPUT_DIR
    for file in "$INPUT_DIR"/*; do
        if [ $(grep -o '>' "$file" | wc -l) -ge "$CUTOFF" ]; then
            cp "$file" "$OUTPUT_DIR"
        fi
    done
}

rapidnj() {
    local INPUT_DIR=$1
    local OUTPUT_DIR=$2
    rm -r $OUTPUT_DIR 2> /dev/null
    mkdir -p $OUTPUT_DIR
    find $INPUT_DIR -type f > parallel_input.tmp
    parallel -j $THREADS \
        "echo {} && rapidnj {} \
        -i fa \
        -c 1 \
        -x $OUTPUT_DIR/{/.}.tree \
        && sed -i 's/'\''//g' $OUTPUT_DIR/{/.}.tree" \
        :::: parallel_input.tmp
    rm parallel_input.tmp
    }

meme() {
    local INPUT_DIR1=$1
    local INPUT_DIR2=$2
    local OUTPUT_DIR=$3
    rm -r $OUTPUT_DIR 2> /dev/null
    mkdir -p $OUTPUT_DIR
    find $INPUT_DIR1 -type f > parallel_input.tmp
    parallel -j $THREADS \
        "hyphy CPU=1 meme \
            --alignment {} \
            --tree $INPUT_DIR2/{/.}.tree \
            --output $OUTPUT_DIR/{/.}.meme" \
            :::: parallel_input.tmp
    rm parallel_input.tmp
}

fel() {
    local INPUT_DIR1=$1
    local INPUT_DIR2=$2
    local OUTPUT_DIR=$3
    rm -r $OUTPUT_DIR 2> /dev/null
    mkdir -p $OUTPUT_DIR
    find $INPUT_DIR1 -type f > parallel_input.tmp
    parallel -j $THREADS \
        "hyphy CPU=1 fel \
            --alignment {} \
            --tree $INPUT_DIR2/{/.}.tree \
            --output $OUTPUT_DIR/{/.}.fel" \
            :::: parallel_input.tmp
    rm parallel_input.tmp
}

slac() {
    local INPUT_DIR1=$1
    local INPUT_DIR2=$2
    local OUTPUT_DIR=$3
    rm -r $OUTPUT_DIR 2> /dev/null
    mkdir -p $OUTPUT_DIR
    find $INPUT_DIR1 -type f > parallel_input.tmp
    parallel -j $THREADS \
        "hyphy CPU=1 slac \
            --alignment {} \
            --tree $INPUT_DIR2/{/.}.tree \
            --output $OUTPUT_DIR/{/.}.slac" \
            :::: parallel_input.tmp
    rm parallel_input.tmp
}

codeml() {
    local INPUT_DIR=$1
    local OUTPUT_DIR=$2
    rm -r $OUTPUT_DIR 2> /dev/null
    mkdir -p $OUTPUT_DIR
    find $INPUT_DIR -type f > parallel_input.tmp
    parallel -j $THREADS \
        "mkdir $OUTPUT_DIR/{/.} \
        && sed 's|stewart\.aa|/home/stefan/UpDownSelect/{}|g; \
        s|mlc|{/.}.cml|g; \
        s|stewart\.trees|/home/stefan/UpDownSelect/data/rapidnj/{/.}.tree|g' \
        resources/codeml_default.ctl > $OUTPUT_DIR/{/.}/{/.}.ctl \
        && cd $OUTPUT_DIR/{/.} \
        && codeml {/.}.ctl" \
        :::: parallel_input.tmp
    rm parallel_input.tmp
}

dNdS_per_site() {
    local INPUT_DIR=$1
    local OUTPUT_DIR=$2
    rm -r $OUTPUT_DIR 2> /dev/null
    mkdir -p $OUTPUT_DIR
    find $INPUT_DIR -type f > parallel_input.tmp
    parallel -j $THREADS \
        "python scripts/dNdS.py per_site -i {} -o $OUTPUT_DIR/{/.}.tsv" \
        :::: parallel_input.tmp
    rm parallel_input.tmp
}

hyphy_per_site() {
    local INPUT_DIR=$1
    local OUTPUT_DIR=$2
    rm -r $OUTPUT_DIR 2> /dev/null
    mkdir -p $OUTPUT_DIR
    find $INPUT_DIR -type f > parallel_input.tmp
    parallel -j $THREADS \
        "python scripts/hyphy_per_site.py \
        -m {} \
        -f data/fel/{/.}.fel \
        -s data/slac/{/.}.slac \
        -c data/codeml/{/.}/rst \
        -d data/dNdS_per_site/{/.}.tsv \
        -n data/dNdS_per_site_with_dups/{/.}.tsv \
        -o $OUTPUT_DIR/{/.}.tsv" \
        :::: parallel_input.tmp
    rm parallel_input.tmp
}

### FUNCTION CALLS ###

# fetch_genome_data $INPUT_DIR "$TAXON"
format_metadata $INPUT_DIR/data/assembly_data_report.jsonl $INPUT_DIR/data/ncbi_metadata.tsv
# extract_orfs $INPUT_DIR/data $OUTPUT_DIR/orfs
# build_blast_database $OUTPUT_DIR/orfs $OUTPUT_DIR/blastdb
# split_amr_db resources/amr_db.fasta data/references
# translate_fasta $OUTPUT_DIR/references/dna $OUTPUT_DIR/references/protein
# amr_blast $OUTPUT_DIR/references/protein $OUTPUT_DIR/blastdb/full_db $OUTPUT_DIR/amr_blast
# filter_blast $OUTPUT_DIR/amr_blast $OUTPUT_DIR/filtered_ids
# collect_amr_seqs $OUTPUT_DIR/filtered_ids data/blastdb/combined.fasta $OUTPUT_DIR/multi
# sort_amr_seqs $OUTPUT_DIR/multi $OUTPUT_DIR/sorted_multi $OUTPUT_DIR/filtered_ids
# translate_fasta $OUTPUT_DIR/sorted_multi $OUTPUT_DIR/transeq
# msa $OUTPUT_DIR/transeq $OUTPUT_DIR/msa
# pal2nal $OUTPUT_DIR/msa $OUTPUT_DIR/sorted_multi $OUTPUT_DIR/pal2nal
# remove_duplicates $OUTPUT_DIR/pal2nal $OUTPUT_DIR/rmdup
# check_min_seq_counts $OUTPUT_DIR/rmdup $OUTPUT_DIR/min_seq_counts 3
# rapidnj $OUTPUT_DIR/min_seq_counts $OUTPUT_DIR/rapidnj
# meme $OUTPUT_DIR/min_seq_counts $OUTPUT_DIR/rapidnj $OUTPUT_DIR/meme
# fel $OUTPUT_DIR/min_seq_counts $OUTPUT_DIR/rapidnj $OUTPUT_DIR/fel
# slac $OUTPUT_DIR/min_seq_counts $OUTPUT_DIR/rapidnj $OUTPUT_DIR/slac
# codeml $OUTPUT_DIR/min_seq_counts /home/stefan/UpDownSelect/$OUTPUT_DIR/codeml
# dNdS_per_site $OUTPUT_DIR/min_seq_counts $OUTPUT_DIR/dNdS_per_site
# check_min_seq_counts $OUTPUT_DIR/pal2nal $OUTPUT_DIR/min_seq_counts_with_dups 3
# dNdS_per_site $OUTPUT_DIR/min_seq_counts_with_dups $OUTPUT_DIR/dNdS_per_site_with_dups
# hyphy_per_site $OUTPUT_DIR/meme $OUTPUT_DIR/hyphy_per_site