#!/bin/bash

INPUT_DIR=$1
THREADS=$2

# datasets download genome taxon "staphylococcus aureus" \
#     --assembly-level complete \
#     --exclude-atypical \
#     --filename "${INPUT_DIR}.zip"

# unzip -n "${INPUT_DIR}.zip"
# if [ "$INPUT_DIR" != "ncbi_dataset" ]; then
#     mv ncbi_dataset $INPUT_DIR
# fi

# mkdir -p data/genomes/
# GENOMES=$(find $INPUT_DIR -name "*.fna")
# for file in $GENOMES; do
#     base=$(basename $file | cut -d "_" -f -2)
#     awk -i inplace '{gsub(/^>.*$/, ">" "'"$base"'" "_" (++c)); print}' $file
#     cp $file data/genomes/$base.fna; done

# mkdir data/prokka/
# FNA=$(find "data/genomes" -name "*.fna")
# parallel -j $THREADS \
#     prokka \
#         --cpus 1 \
#         --prefix {/.} \
#         --locustag {/.} \
#         --outdir data/prokka/{/.} {} \
#     ::: "${FNA[@]}"

# FFN=$(find "data/prokka/" -name "*.ffn")
# parallel -j $THREADS \
#     "seqkit split \
#         -i \
#         --by-id-prefix '' \
#         --out-dir data/seqkit/{/.} {}" \
#     ::: "${FFN[@]}"

# GFF=$(find "data/prokka" -name "*.gff")
# roary \
#     -f data/roary \
#     -e \
#     --mafft \
#     -p $THREADS \
#     $GFF 

# PAN_TABLE="data/roary/gene_presence_absence.csv"
# GENES="data/temp/genes.temp"
# dos2unix $PAN_TABLE
# mkdir data/temp
# cut -d "," -f1 "$PAN_TABLE" > $GENES
# sed -i 's/[\t/'\''() ]/_/g' $GENES

# PAN_TABLE_TEMP="data/temp/gene_presence_absence.temp"
# while read -r line; do
#   rev_line=$(echo "$line" | rev | cut -d "," -f-$SAMPLE_SIZE | rev)
#   echo "$rev_line" >> "$PAN_TABLE_TEMP"
# done < "$PAN_TABLE"

# PAN_TABLE_FILTERED="data/roary/gene_presence_absence_filtered.tsv"
# paste -d "," $GENES "$PAN_TABLE_TEMP" > "$PAN_TABLE_FILTERED"
# sed -i '1d' "$PAN_TABLE_FILTERED"
# sed -i 's/,/\t/g' "$PAN_TABLE_FILTERED"
# sed -i 's/"//g' "$PAN_TABLE_FILTERED"

# GGF_COUNT=$(echo "$GFF" | wc -l)
# mkdir data/per_gene
# while IFS= read -r line; do
#     dir=$(awk '{print $1}' <<< "$line")
#     loci=$(awk '{$1=""; print $0}' <<< "$line")
#     if [[ $(echo $loci | wc -w) -ge $GFF_COUNT ]]; then
#         mkdir data/per_gene/$dir
#         for locus in $loci; do
#             base=$(echo $locus | cut -d "_" -f -2)
#             cp data/seqkit/$base/$locus.ffn data/per_gene/$dir/
#             done
#     fi
# done < $PAN_TABLE_FILTERED

# PER_GENE=data/temp/PER_GENE.temp
# find data/per_gene/ -type f > $PER_GENE
# parallel -j $THREADS \
#     "sed -i '1s/.*/>{/.}/' {}" \
#     :::: $PER_GENE
# parallel -j $THREADS \
#     "truncate -s -4 {}" \
#     :::: $PER_GENE

# PER_GENE=data/temp/PER_GENE.temp
# find data/per_gene/* -type d > $PER_GENE
# mkdir data/multi
# for dir in $(cat $PER_GENE); do
#     cat $dir/*.ffn > data/multi/$(basename $dir).fasta
#     done

# MULTI=data/temp/MULTI.temp
# find data/multi -type f > $MULTI
# mkdir data/rmdup
# mkdir data/duplicates
# parallel -j $THREADS \
#     "seqkit rmdup \
#         -s {} \
#         -D data/duplicates/{/.}.dup \
#         > data/rmdup/{/.}.fasta" \
#     :::: $MULTI

# RMDUP=data/temp/RMDUP.temp
# find data/rmdup -type f > $RMDUP
# mkdir data/msa
# parallel -j $THREADS \
#     "mafft \
#         --auto \
#         --preservecase \
#         {} \
#         > data/msa/{/.}.msa" \
#     :::: $RMDUP

# MSA=data/temp/MSA.temp
# find data/msa -type f > $MSA
# mkdir data/consensus
# parallel -j $THREADS \
#     "cons -name {/.}.consensus {} data/consensus/{/.}.cons" \
#     :::: $MSA

# mkdir data/rapidnj
# parallel -j $THREADS \
#     "rapidnj {} \
#     -i fa \
#     -x data/rapidnj/{/.}.tree \
#     && sed -i 's/'\''//g' data/rapidnj/{/.}.tree" \
#     :::: $MSA

# mkdir data/stopless_msa
# parallel -j $THREADS \
#     "python scripts/remove_stop_codons.py \
#     -i {} \
#     -o data/stopless_msa/{/.}.msa" \
#     :::: $MSA

# STOPLESS=data/temp/STOPLESS.temp
# find data/stopless_msa -type f > $STOPLESS
# mkdir data/meme
# parallel -j $THREADS \
#     "hyphy meme \
#     --alignment {} \
#     --tree data/rapidnj/{/.}.tree \
#     --output data/meme/{/.}.meme" \
#     :::: $STOPLESS

# MEME=data/temp/MEME.temp
# find data/meme -type f > $MEME
# mkdir data/meme_reports
# parallel -j $THREADS \
#     "python scripts/hyphy_report.py \
#     -f {} \
#     -o data/meme_reports/{/.}.tsv \
#     -m meme" \
#     :::: $MEME

# mkdir data/fel
# parallel -j $THREADS \
#     "hyphy fel \
#     --alignment {} \
#     --tree data/rapidnj/{/.}.tree \
#     --output data/fel/{/.}.fel" \
#     :::: $STOPLESS

# FEL=data/temp/FEL.temp
# find data/fel -type f > $FEL
# mkdir data/fel_reports
# parallel -j $THREADS \
#     "python scripts/hyphy_report.py \
#     -f {} \
#     -o data/fel_reports/{/.}.tsv \
#     -m fel" \
#     :::: $FEL

# mkdir data/slac
# parallel -j $THREADS \
#     "hyphy slac \
#     --alignment {} \
#     --tree data/rapidnj/{/.}.tree \
#     --output data/slac/{/.}.slac" \
#     :::: $STOPLESS > slac.log 2>&1

# SLAC=data/temp/SLAC.temp
# find data/slac -type f > $SLAC
# mkdir data/slac_reports
# parallel -j $THREADS \
#     "echo {} && \
#     python scripts/hyphy_report.py \
#     -f {} \
#     -o data/slac_reports/{/.}.tsv \
#     -m slac" \
#     :::: $SLAC

# mkdir data/codeml_ctl
# parallel -j $THREADS \
#     "sed 's|stewart\.aa|{}|g; \
#     s|mlc|data/codeml/{/.}.cml|g; \
#     s|stewart\.trees|data/rapidnj/{/.}.tree|g' \
#     config/codeml_default.ctl > data/codeml_ctl/{/.}.ctl" \
#     :::: $STOPLESS

# CTL=data/temp/CTL.temp
# find data/codeml_ctl -type f > $CTL
# mkdir data/codeml
# parallel -j $THREADS "codeml {}" :::: $CTL

# CONSENSUS=data/temp/CONSENSUS.temp
# find data/consensus -type f > $CONSENSUS
# mkdir data/dNdS
# parallel -j $THREADS \
#     "python scripts/dNdS.py \
#         --reference {} \
#         --variant data/msa/{/.}.msa \
#         --output data/dNdS/{/.}" \
#     :::: $CONSENSUS
