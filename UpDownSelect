#!/bin/bash

INPUT_DIR=$1
OUTPUT_DIR=$2
THREADS=$3

# datasets download genome taxon "staphylococcus aureus" \
#     --assembly-level complete \
#     --exclude-atypical \
#     --assembly-source 'RefSeq' \
#     --dehydrated \
#     --filename "${INPUT_DIR}.zip"

# unzip -n "${INPUT_DIR}.zip"

# datasets rehydrate --directory .

# mkdir -p $OUTPUT_DIR/genomes/
# GENOMES=$(find $INPUT_DIR -name "*.fna" | shuf -n 3)
# for file in $GENOMES; do
#     base=$(basename $file | cut -d "_" -f -2)
#     # awk -i inplace '{gsub(/^>.*$/, ">" "'"$base"'" "_" (++c)); print}' $file
#     cp $file $OUTPUT_DIR/genomes/$base.fna; done

# mkdir $OUTPUT_DIR/prokka/
# FNA=$(find "$OUTPUT_DIR/genomes" -name "*.fna")
# parallel -j $THREADS \
#     prokka \
#         --cpus 1 \
#         --prefix {/.} \
#         --locustag {/.} \
#         --outdir $OUTPUT_DIR/prokka/{/.} {} \
#     ::: "${FNA[@]}"

# FFN=$(find "$OUTPUT_DIR/prokka/" -name "*.ffn")
# parallel -j $THREADS \
#     "seqkit split \
#         -i \
#         --by-id-prefix '' \
#         --out-dir $OUTPUT_DIR/seqkit/{/.} {}" \
#     ::: "${FFN[@]}"

# GFF=$(find "$OUTPUT_DIR/prokka" -name "*.gff")
# roary \
#     -f $OUTPUT_DIR/roary \
#     -e \
#     --mafft \
#     -p $THREADS \
#     $GFF 

# PAN_TABLE="$OUTPUT_DIR/roary/gene_presence_absence.csv"
# GENES="$OUTPUT_DIR/temp/genes.temp"
# dos2unix $PAN_TABLE
# mkdir $OUTPUT_DIR/temp
# cut -d "," -f1 "$PAN_TABLE" > $GENES
# sed -i 's/[\t/'\''() ]/_/g' $GENES

# PAN_TABLE_TEMP="$OUTPUT_DIR/temp/gene_presence_absence.temp"
# GFF_COUNT=$(echo "$GFF" | wc -l)
# while read -r line; do
#   rev_line=$(echo "$line" | rev | cut -d "," -f-$GFF_COUNT | rev)
#   echo "$rev_line" >> "$PAN_TABLE_TEMP"
# done < "$PAN_TABLE"

# PAN_TABLE_FILTERED="$OUTPUT_DIR/roary/gene_presence_absence_filtered.tsv"
# paste -d "," $GENES "$PAN_TABLE_TEMP" > "$PAN_TABLE_FILTERED"
# sed -i '1d' "$PAN_TABLE_FILTERED"
# sed -i 's/,/\t/g' "$PAN_TABLE_FILTERED"
# sed -i 's/"//g' "$PAN_TABLE_FILTERED"

# mkdir $OUTPUT_DIR/per_gene
# while IFS= read -r line; do
#     dir=$(awk '{print $1}' <<< "$line")
#     loci=$(awk '{$1=""; print $0}' <<< "$line")
#     mkdir $OUTPUT_DIR/per_gene/$dir
#     for locus in $loci; do
#         base=$(echo $locus | cut -d "_" -f -2)
#         mv $OUTPUT_DIR/seqkit/$base/$locus.ffn $OUTPUT_DIR/per_gene/$dir/
#         done
# done < $PAN_TABLE_FILTERED

# PER_GENE=$OUTPUT_DIR/temp/PER_GENE.temp
# find $OUTPUT_DIR/per_gene/ -type f > $PER_GENE
# parallel -j $THREADS \
#     "sed -i '1s/.*/>{/.}/' {}; \
#     truncate -s -4 {}; \
#     echo >> {}" \
#     :::: $PER_GENE

# PER_GENE=$OUTPUT_DIR/temp/PER_GENE.temp
# find $OUTPUT_DIR/per_gene/* -type d > $PER_GENE
# mkdir $OUTPUT_DIR/multi
# for dir in $(cat $PER_GENE); do
#     cat $dir/*.ffn > $OUTPUT_DIR/multi/$(basename $dir).fasta
#     done

# MULTI=$OUTPUT_DIR/temp/MULTI.temp
# find $OUTPUT_DIR/multi -type f > $MULTI
# mkdir $OUTPUT_DIR/rmdup
# mkdir $OUTPUT_DIR/duplicates
# parallel -j $THREADS \
#     "seqkit rmdup \
#         -s {} \
#         -D $OUTPUT_DIR/duplicates/{/.}.dup \
#         > $OUTPUT_DIR/rmdup/{/.}.fasta" \
#     :::: $MULTI

# FILTERED_MULTI=$OUTPUT_DIR/temp/FILTERED_MULTI.temp
# for file in $(find $OUTPUT_DIR/rmdup -type f); do
#     sequence_count=$(grep -c "^>" "$file")
#     if (( sequence_count >= 3 )); then
#         echo "$file" >> $FILTERED_MULTI
#     fi
# done

# mkdir $OUTPUT_DIR/msa
# parallel -j $THREADS \
#     "mafft \
#         --auto \
#         --preservecase \
#         {} \
#         > $OUTPUT_DIR/msa/{/.}.msa" \
#     :::: $FILTERED_MULTI

MSA=$OUTPUT_DIR/temp/MSA.temp
# find $OUTPUT_DIR/msa -type f > $MSA
# mkdir $OUTPUT_DIR/rapidnj
# parallel -j $THREADS \
#     "rapidnj {} \
#     -i fa \
#     -x $OUTPUT_DIR/rapidnj/{/.}.tree \
#     && sed -i 's/'\''//g' $OUTPUT_DIR/rapidnj/{/.}.tree" \
#     :::: $MSA

mkdir $OUTPUT_DIR/meme
parallel -j $THREADS \
    "hyphy meme \
        --alignment {} \
        --tree $OUTPUT_DIR/rapidnj/{/.}.tree \
        --output $OUTPUT_DIR/meme/{/.}.meme" \
    :::: $MSA

# MEME=$OUTPUT_DIR/temp/MEME.temp
# find $OUTPUT_DIR/meme -type f > $MEME
# mkdir $OUTPUT_DIR/meme_reports
# parallel -j $THREADS \
#     "python scripts/hyphy_report.py \
#     -f {} \
#     -o $OUTPUT_DIR/meme_reports/{/.}.tsv \
#     -m meme" \
#     :::: $MEME

# MREPORTS=$OUTPUT_DIR/temp/MREPORTS.temp
# find $OUTPUT_DIR/meme_reports -type f > $MREPORTS
# mkdir $OUTPUT_DIR/reports
# parallel -j $THREADS \
#     'python scripts/hyphy_extract.py -f {} -g {/.} -m meme >> $OUTPUT_DIR/reports/meme_report.tsv' \
#     :::: $MREPORTS

# mkdir $OUTPUT_DIR/fel
# parallel -j $THREADS \
#     'if [ -s "$OUTPUT_DIR/rapidnj/{/.}.tree" ]; then \
#         hyphy fel \
#             --alignment {} \
#             --tree $OUTPUT_DIR/rapidnj/{/.}.tree \
#             --output $OUTPUT_DIR/fel/{/.}.fel; \
#     fi' \
#     :::: $MSA

# FEL=$OUTPUT_DIR/temp/FEL.temp
# find $OUTPUT_DIR/fel -type f > $FEL
# mkdir $OUTPUT_DIR/fel_reports
# parallel -j $THREADS \
#     "python scripts/hyphy_report.py \
#     -f {} \
#     -o $OUTPUT_DIR/fel_reports/{/.}.tsv \
#     -m fel" \
#     :::: $FEL

# FREPORTS=$OUTPUT_DIR/temp/FREPORTS.temp
# find $OUTPUT_DIR/fel_reports -type f > $FREPORTS
# parallel -j $THREADS \
#     'python scripts/hyphy_extract.py -f {} -g {/.} -m fel >> $OUTPUT_DIR/reports/fel_report.tsv' \
#     :::: $FREPORTS

# mkdir $OUTPUT_DIR/slac
# parallel -j $THREADS \
#     'if [ -s "$OUTPUT_DIR/rapidnj/{/.}.tree" ]; then \
#         hyphy slac \
#             --alignment {} \
#             --tree $OUTPUT_DIR/rapidnj/{/.}.tree \
#             --output $OUTPUT_DIR/slac/{/.}.slac; \
#     fi' \
#     :::: $MSA

# SLAC=$OUTPUT_DIR/temp/SLAC.temp
# find $OUTPUT_DIR/slac -type f > $SLAC
# mkdir $OUTPUT_DIR/slac_reports
# parallel -j $THREADS \
#     "echo {} && \
#     python scripts/hyphy_report.py \
#     -f {} \
#     -o $OUTPUT_DIR/slac_reports/{/.}.tsv \
#     -m slac" \
#     :::: $SLAC

# SREPORTS=$OUTPUT_DIR/temp/SREPORTS.temp
# find $OUTPUT_DIR/slac_reports -type f > $SREPORTS
# parallel -j $THREADS \
#     'python scripts/hyphy_extract.py -f {} -g {/.} -m slac >> $OUTPUT_DIR/reports/slac_report.tsv' \
#     :::: $SREPORTS

# mkdir $OUTPUT_DIR/codeml_ctl
# parallel -j $THREADS \
#     "sed 's|stewart\.aa|{}|g; \
#     s|mlc|$OUTPUT_DIR/codeml/{/.}.cml|g; \
#     s|stewart\.trees|$OUTPUT_DIR/rapidnj/{/.}.tree|g' \
#     config/codeml_default.ctl > $OUTPUT_DIR/codeml_ctl/{/.}.ctl" \
#     :::: $MSA

# CTL=$OUTPUT_DIR/temp/CTL.temp
# find $OUTPUT_DIR/codeml_ctl -type f > $CTL
# mkdir $OUTPUT_DIR/codeml
# parallel -j $THREADS "codeml {}" :::: $CTL

# CML=$OUTPUT_DIR/temp/CML.temp
# find $OUTPUT_DIR/codeml -type f > $CML
# parallel -j $THREADS 'value=$(grep "w (dN/dS) for branches:" {} | awk "{print \$NF}") && echo -e "{/.}\t$value" >> $OUTPUT_DIR/reports/cml_report.tsv' :::: $CML

# abritamr run -c $OUTPUT_DIR/roary/pan_genome_reference.fa -j $THREADS --prefix $OUTPUT_DIR/abritamr
# awk -F'\t' '{gsub(/\(|\)/,"_"); print $6 "\t" $9}' $OUTPUT_DIR/abritamr/amrfinder.out > $OUTPUT_DIR/reports/abritamr_report.tsv

# python scripts/report_table.py

# mkdir $OUTPUT_DIR/consensus
# parallel -j $THREADS \
#     "cons -name {/.}.consensus {} $OUTPUT_DIR/consensus/{/.}.cons" \
#     :::: $MSA

# CONSENSUS=$OUTPUT_DIR/temp/CONSENSUS.temp
# find $OUTPUT_DIR/consensus -type f > $CONSENSUS
# mkdir $OUTPUT_DIR/dNdS
# parallel -j $THREADS \
#     "python scripts/dNdS.py \
#         --reference {} \
#         --variant $OUTPUT_DIR/msa/{/.}.msa \
#         --output $OUTPUT_DIR/dNdS/{/.}" \
#     :::: $CONSENSUS
